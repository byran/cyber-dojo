
- - - - - - - - - - - - - - - - - - - - - - -
Languages that have sym-linked support files
- - - - - - - - - - - - - - - - - - - - - - -
"/var/www/cyber-dojo/languages/Bash/shunit2/manifest.json"
"/var/www/cyber-dojo/languages/C#/NUnit/manifest.json"
"/var/www/cyber-dojo/languages/C#/SpecFlow/manifest.json"
"/var/www/cyber-dojo/languages/F#/NUnit/manifest.json"
"/var/www/cyber-dojo/languages/g++4.8.1/Catch/manifest.json"
"/var/www/cyber-dojo/languages/Groovy/JUnit/manifest.json"
"/var/www/cyber-dojo/languages/Groovy/Spock/manifest.json"
"/var/www/cyber-dojo/languages/Java/Approval/manifest.json"  
"/var/www/cyber-dojo/languages/Java/Cucumber/manifest.json"
"/var/www/cyber-dojo/languages/Java/JMock/manifest.json"
"/var/www/cyber-dojo/languages/Java/JUnit/manifest.json"
"/var/www/cyber-dojo/languages/Java/Mockito/manifest.json"
"/var/www/cyber-dojo/languages/Java/PowerMockito/manifest.json"
"/var/www/cyber-dojo/languages/Scala/scalatest/manifest.json"


The above was listed using the following ruby script
#!/usr/bin/env ruby
require 'json'
CYBER_DOJO_ROOT_DIR = '/var/www/cyber-dojo'
Dir.glob("#{CYBER_DOJO_ROOT_DIR}/languages/*/*/manifest.json") do |file|
  json = JSON.parse(IO.read(file))
  support_filenames = json['support_filenames']
  if !support_filenames.nil?
    p "#{file}"
  end
end


- - - - - - - - - - - - - - - - - - - -
So I need to append an ADD command to each Dockerfile
that has support files. For example

Java/Cucumber   ...add these lines
#- - - - - - - - - - - - - - 
ADD cucumber-core-1.1.6.jar /sandbox
ADD cucumber-html-0.2.3.jar /sandbox
ADD cucumber-java-1.1.6.jar /sandbox
ADD cucumber-junit-1.1.6.jar /sandbox
ADD cucumber-jvm-deps-1.0.3.jar /sandbox
ADD cucumber-picocontainer-1.1.6.jar /sandbox
ADD gherkin-2.12.2.jar /sandbox
ADD hamcrest-core-1.3.jar /sandbox
ADD junit-4.11.jar /sandbox
ADD picocontainer-2.14.2.jar /sandbox
#- - - - - - - - - - - - - - 

The support_filenames still need to present in
manifest.json so that you cannot accidentally
create files with the same name.

Then lose the sym-linking
...
app/models/Sandbox.rb
class Sandbox
  def start
    avatar.visible_files.each { |filename,content| 
      git_add(filename,content) 
    }
    #language.support_filenames.each { |filename|
    #  disk.symlink(language.path + filename, path + filename)
    #}
  end
end
...
lib/Disk.rb
class Disk
  #def symlink(old_name, new_name)
  # File.symlink(old_name, new_name)
  #end
end
...
test/lib/DiskFake.rb
class DiskFake
  #def symlink(old_name, new_name)
  #  symlink_log << ['symlink', old_name, new_name]
  #end
end
Some tests will need updating too.



Java/JUnit add this line 
(note the need for the / at the beginning of /sandbox/ to make it absolute)
(note the need for the / at the end of /sandbox/ to say its a folder)
#- - - - - - - - - - - - - - 
ADD junit-4.11.jar /sandbox/

However it is not quite that easy.
Who owns/sees this new file once /sandbox has been volume mounted?
http://unix.stackexchange.com/questions/123062/user-permissions-inside-and-outside-of-lxc-containers
There is an issue of uid being the same inside and outside the container.
Remember that inside the docker container the user is www-data
so added files need to be visible for that user.


- - - - - - - - - - - - - - - - - - - -
sym-linking...
- - - - - - - - - - - - - - - - - - - -
Renaming/restructuring the language folders.
One effect of this will be that existing
dojos for languages that have sym-linked 
support files will no longer be resumable.
Or rather, they will be re-enterable, and
you will be able to fork, but you will 
not be able to [test]
This suggests that dojos should have a
max duration. Say one day.
See 07-timed-out-dojos.txt - it's better to
timeout a dojo if there is no activity for a 
certain period).

Maybe rework languages that have sym-links
so their symlinked files are inside the docker 
container, and then remove sym-linking completely.

This will update the docker container images.
They will have the same name of course.
This means I will need to check for updates.
$ docker pull NAME
does nothing quite fast if there is no change.
But pulls the new image if it has changed.
DONE.

So I need to create a script to iterate through
the installed languages and check for updates
by (re)pulling their docker containers.
And then add that to pull.sh DONE



Summary
-------
sym-linking advantages and disadvantages
o) sym-linking works for DockerTestRunner and HostTestRunner
o) takes extra space in katas/ folder since sym-link has to be copied for every animal.
o) slower avatar start
o) coupling - would be nice if user-code was in browser and
   other code was in docker container. For example, if I want to 
   upgrade a language&test container I cannot remove the sym-linked
   files if I want to allow katas that used it to be re-enterable.
   This is a reason to make katas readonly if they have been inactive
   for a period of time.
o) removing sym-linking on docker (currently) is tricky and involves
   ensuring uids/guids match outside/inside the docker container.
   


For now I've decided to leave the sym-linking in place.





